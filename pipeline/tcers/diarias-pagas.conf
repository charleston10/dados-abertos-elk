# Fonte: TCE-RS
# Origem: http://dados.tce.rs.gov.br/group/institucional/

input {
	file {
		# A entrada serão os arquivos de dados abertos de diárias pagas
		path => "${PWD}/data/tcers/diarias-pagas/*.csv"

		# Como serão lidos apenas uma vez, inicia do começa do arquivo e o lê até o final
		start_position => "beginning"

		# Não mantém controle da posição lida do arquivo (seria importante no caso por exemplo
		# de arquivo de log, lido constantemente)
		sincedb_path => "/dev/null"
	}
}
filter {
	# Ignora linhas extras do campo motivo (quebra de linhas)
	if [message] !~ "^2" {
		drop { }
	}

	# Corrige problema da utilização de aspas duplas dentro do campo "motivo"
	# terem sido geradas como "" ao invés de \" ou '
	mutate {
		gsub => [ "message", '""', "'" ] # Substitui duas aspas duplas seguidas por uma simples
	}
	
	# Além disso, em alguns registros campo motivo tem uma aspas inicial que não é fechada
	if [message][-1] != '"' {
		mutate {
			replace => { "message" => '%{message}"' } # Inclui aspas de fechamento
		}
	}

	# Lê arquivo CSV, mapeando colunas
	csv {
		skip_header => true
		columns => ["ano","matricula","nome","cargo","setor","cod_municipio_origem","nome_municipio_origem","cod_municipio_destino","nome_municipio_destino","periodo1_inicio","periodo1_fim","periodo1_quantidade","periodo2_inicio","periodo2_fim","periodo2_quantidade","valor","motivo"]
	}

	# Ignora cabeçalho
	if [matricula] == "MATRICULA" {
		drop { }
	}

	# Reorganiza os campos
	# Período 1
	if [periodo1_inicio] {
		mutate { add_field => { "[periodo1][inicio]" => "%{periodo1_inicio} 01:00" } }
	}
	if [periodo1_fim] {
		mutate { add_field => { "[periodo1][fim]" => "%{periodo1_fim} 01:00" } }
	}
	if [periodo1_quantidade] {
		mutate { add_field => { "[periodo1][quantidade]" => "%{periodo1_quantidade}" } }
	}

	# Período 2 
	if [periodo2_inicio] {
		mutate { add_field => { "[periodo2][inicio]" => "%{periodo2_inicio} 01:00" } }
	}
	if [periodo2_fim] {
		mutate { add_field => { "[periodo2][fim]" => "%{periodo2_fim} 01:00" } }
	}
	if [periodo2_quantidade] {
		mutate { add_field => { "[periodo2][quantidade]" => "%{periodo2_quantidade}" } }
	}

	# Remove campos reorganizados e também os desnecessários (serão recriados a partir de dicionários)
	mutate {
		remove_field => [ "nome_municipio_origem", "nome_municipio_destino",
						  "periodo1_inicio", "periodo1_fim", "periodo1_quantidade",
						  "periodo2_inicio", "periodo2_fim", "periodo2_quantidade" ]
	}

	# Dicionário de municípios
	# Enriquece informações relacionadas ao município, colocando-as dentro do nó 'origem'
	translate {
		dictionary_path => "${PWD}/dict/tcers/municipios.yml"
		field => "cod_municipio_origem"
		destination => "dict_municipios_origem"
	}

	if [dict_municipios_origem] and [cod_municipio_origem] {
		dissect {
			mapping => {
				"dict_municipios_origem" => "%{[origem][nome_municipio]};%{[origem][uf]};%{[origem][cd_municipio_ibge]};%{[origem][cd_sedes_tce]};%{[origem][sigla_sede_tce]};%{[origem][nome_sede_tce]};%{[origem][latitude]};%{[origem][longitude]}"
			}
		}

		mutate {
			# Cria campo 'origem.cd_municipio' e exclui o 'cod_municipio_origem'
			add_field => { "[origem][cd_municipio]" => "%{cod_municipio_origem}" }
			remove_field => [ "cod_municipio_origem" ]

			# Cria campo de localização do município (geohash para ser utilizado no Elasticsearch)
			add_field => { "[origem][localizacao]" => "%{[origem][latitude]},%{[origem][longitude]}" }
		}
   }

	# Dicionário de municípios
	# Enriquece informações relacionadas ao município, colocando-as dentro do nó 'destino'
	translate {
		dictionary_path => "${PWD}/dict/tcers/municipios.yml"
		field => "cod_municipio_destino"
		destination => "dict_municipios_destino"
	}

	if [dict_municipios_destino] and [cod_municipio_destino] {
		dissect {
			mapping => {
				"dict_municipios_destino" => "%{[destino][nome_municipio]};%{[destino][uf]};%{[destino][cd_municipio_ibge]};%{[destino][cd_sedes_tce]};%{[destino][sigla_sede_tce]};%{[destino][nome_sede_tce]};%{[destino][latitude]};%{[destino][longitude]}"
			}
		}

		mutate {
			# Cria campo 'destino.cd_municipio' e exclui o 'cod_municipio_destino'
			add_field => { "[destino][cd_municipio]" => "%{cod_municipio_destino}" }
			remove_field => [ "cod_municipio_destino" ]

			# Cria campo de localização do município (geohash para ser utilizado no Elasticsearch)
			add_field => { "[destino][localizacao]" => "%{[destino][latitude]},%{[destino][longitude]}" }
		}
   }

	# Converte tipos de dados
    mutate {
        convert => { "ano" => "integer" }
        convert => { "[origem][cd_municipio]" => "integer" }
        convert => { "[origem][cd_municipio_ibge]" => "integer" }
        convert => { "[origem][cd_sedes_tce]" => "integer" }
        convert => { "[origem][latitude]" => "float" }
        convert => { "[origem][longitude]" => "float" }
        convert => { "[destino][cd_municipio]" => "integer" }
        convert => { "[destino][cd_municipio_ibge]" => "integer" }
        convert => { "[destino][cd_sedes_tce]" => "integer" }
        convert => { "[destino][latitude]" => "float" }
        convert => { "[destino][longitude]" => "float" }
        convert => { "[periodo1][quantidade]" => "float" }
        convert => { "[periodo2][quantidade]" => "float" }
        convert => { "valor" => "float" }
    }

	# Define um valor de data para ser utilizado no Elasticsearch
	date {
		match => ["[periodo1][inicio]", "dd/MM/yyyy HH:mm"]
		target => "@timestamp"
	}

	date {
		match => ["[periodo1][inicio]", "dd/MM/yyyy HH:mm"]
		target => "[periodo1][inicio]"
	}

	if [periodo1][fim] {
		date {
			match => ["[periodo1][fim]", "dd/MM/yyyy HH:mm"]
			target => "[periodo1][fim]"
		}
	}
    if [periodo2][inicio] {
	    date {
            match => ["[periodo2][inicio]", "dd/MM/yyyy HH:mm"]
	        target => "[periodo2][inicio]"
   	    }
    }

    if [periodo2][fim] {
    	date {
            match => ["[periodo2][fim]", "dd/MM/yyyy HH:mm"]
		    target => "[periodo2][fim]"
		}
    }

	# Remove campos auxiliares
	mutate {
		remove_field => [ "message", "path", "host", "dict_municipios_origem", "dict_municipios_destino" ]
	}
}
output {
#	stdout { codec => dots }

#	stdout { codec => rubydebug }

	elasticsearch {
		hosts => [ "localhost:9200" ]
		index => "tcers-diarias-pagas"
	}
}
